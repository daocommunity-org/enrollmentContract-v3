/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Database {
  export type MemberStruct = {
    id: BigNumberish;
    walletAddress: AddressLike;
    name: string;
    regno: string;
    email: string;
    phone: string;
    message: string;
    enrollmentTime: BigNumberish;
    isActive: boolean;
  };

  export type MemberStructOutput = [
    id: bigint,
    walletAddress: string,
    name: string,
    regno: string,
    email: string,
    phone: string,
    message: string,
    enrollmentTime: bigint,
    isActive: boolean
  ] & {
    id: bigint;
    walletAddress: string;
    name: string;
    regno: string;
    email: string;
    phone: string;
    message: string;
    enrollmentTime: bigint;
    isActive: boolean;
  };
}

export interface DatabaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "adminUpdateMemberInfo"
      | "admins"
      | "deactivateMember"
      | "enroll"
      | "getActiveMembers"
      | "getAllMemberAddr"
      | "getAllMembers"
      | "getMemberCount"
      | "getMemberInfo"
      | "importBulk"
      | "importOne"
      | "isEnrolled"
      | "memberList"
      | "members"
      | "pause"
      | "paused"
      | "reactivateMember"
      | "removeAdmin"
      | "removeMember"
      | "unpause"
      | "updateMemberInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "ContractPaused"
      | "ContractUnpaused"
      | "MemberDeactivated"
      | "MemberDeleted"
      | "MemberEnrolled"
      | "MemberReactivated"
      | "MemberUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUpdateMemberInfo",
    values: [AddressLike, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "deactivateMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enroll",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMemberAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "importBulk",
    values: [
      AddressLike[],
      string[],
      string[],
      string[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "importOne",
    values: [AddressLike, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnrolled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "memberList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivateMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMemberInfo",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminUpdateMemberInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enroll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMemberAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "importBulk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "importOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEnrolled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memberList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivateMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMemberInfo",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractPausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractUnpausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberDeactivatedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberDeletedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberEnrolledEvent {
  export type InputTuple = [
    member: AddressLike,
    name: string,
    id: BigNumberish
  ];
  export type OutputTuple = [member: string, name: string, id: bigint];
  export interface OutputObject {
    member: string;
    name: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberReactivatedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberUpdatedEvent {
  export type InputTuple = [member: AddressLike, name: string];
  export type OutputTuple = [member: string, name: string];
  export interface OutputObject {
    member: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Database extends BaseContract {
  connect(runner?: ContractRunner | null): Database;
  waitForDeployment(): Promise<this>;

  interface: DatabaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[_newAdmin: AddressLike], [void], "nonpayable">;

  adminUpdateMemberInfo: TypedContractMethod<
    [
      _member: AddressLike,
      _name: string,
      _email: string,
      _phoneNumber: string,
      _msg: string
    ],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  deactivateMember: TypedContractMethod<
    [_member: AddressLike],
    [void],
    "nonpayable"
  >;

  enroll: TypedContractMethod<
    [
      _name: string,
      _email: string,
      _phone: string,
      _regno: string,
      _msg: string
    ],
    [void],
    "nonpayable"
  >;

  getActiveMembers: TypedContractMethod<[], [string[]], "view">;

  getAllMemberAddr: TypedContractMethod<[], [string[]], "view">;

  getAllMembers: TypedContractMethod<
    [],
    [Database.MemberStructOutput[]],
    "view"
  >;

  getMemberCount: TypedContractMethod<[], [bigint], "view">;

  getMemberInfo: TypedContractMethod<
    [_member: AddressLike],
    [Database.MemberStructOutput],
    "view"
  >;

  importBulk: TypedContractMethod<
    [
      _addresses: AddressLike[],
      _names: string[],
      _emails: string[],
      _phones: string[],
      _regnos: string[],
      _timestamp: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  importOne: TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _email: string,
      _phone: string,
      _regno: string,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isEnrolled: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  memberList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  members: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        id: bigint;
        walletAddress: string;
        name: string;
        regno: string;
        email: string;
        phone: string;
        message: string;
        enrollmentTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  reactivateMember: TypedContractMethod<
    [_member: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  removeMember: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMemberInfo: TypedContractMethod<
    [_name: string, _email: string, _phoneNumber: string, _msg: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminUpdateMemberInfo"
  ): TypedContractMethod<
    [
      _member: AddressLike,
      _name: string,
      _email: string,
      _phoneNumber: string,
      _msg: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateMember"
  ): TypedContractMethod<[_member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enroll"
  ): TypedContractMethod<
    [
      _name: string,
      _email: string,
      _phone: string,
      _regno: string,
      _msg: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveMembers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllMemberAddr"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllMembers"
  ): TypedContractMethod<[], [Database.MemberStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMemberCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMemberInfo"
  ): TypedContractMethod<
    [_member: AddressLike],
    [Database.MemberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "importBulk"
  ): TypedContractMethod<
    [
      _addresses: AddressLike[],
      _names: string[],
      _emails: string[],
      _phones: string[],
      _regnos: string[],
      _timestamp: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "importOne"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _email: string,
      _phone: string,
      _regno: string,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isEnrolled"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "memberList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        id: bigint;
        walletAddress: string;
        name: string;
        regno: string;
        email: string;
        phone: string;
        message: string;
        enrollmentTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "reactivateMember"
  ): TypedContractMethod<[_member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMember"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMemberInfo"
  ): TypedContractMethod<
    [_name: string, _email: string, _phoneNumber: string, _msg: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ContractPaused"
  ): TypedContractEvent<
    ContractPausedEvent.InputTuple,
    ContractPausedEvent.OutputTuple,
    ContractPausedEvent.OutputObject
  >;
  getEvent(
    key: "ContractUnpaused"
  ): TypedContractEvent<
    ContractUnpausedEvent.InputTuple,
    ContractUnpausedEvent.OutputTuple,
    ContractUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "MemberDeactivated"
  ): TypedContractEvent<
    MemberDeactivatedEvent.InputTuple,
    MemberDeactivatedEvent.OutputTuple,
    MemberDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "MemberDeleted"
  ): TypedContractEvent<
    MemberDeletedEvent.InputTuple,
    MemberDeletedEvent.OutputTuple,
    MemberDeletedEvent.OutputObject
  >;
  getEvent(
    key: "MemberEnrolled"
  ): TypedContractEvent<
    MemberEnrolledEvent.InputTuple,
    MemberEnrolledEvent.OutputTuple,
    MemberEnrolledEvent.OutputObject
  >;
  getEvent(
    key: "MemberReactivated"
  ): TypedContractEvent<
    MemberReactivatedEvent.InputTuple,
    MemberReactivatedEvent.OutputTuple,
    MemberReactivatedEvent.OutputObject
  >;
  getEvent(
    key: "MemberUpdated"
  ): TypedContractEvent<
    MemberUpdatedEvent.InputTuple,
    MemberUpdatedEvent.OutputTuple,
    MemberUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "ContractPaused()": TypedContractEvent<
      ContractPausedEvent.InputTuple,
      ContractPausedEvent.OutputTuple,
      ContractPausedEvent.OutputObject
    >;
    ContractPaused: TypedContractEvent<
      ContractPausedEvent.InputTuple,
      ContractPausedEvent.OutputTuple,
      ContractPausedEvent.OutputObject
    >;

    "ContractUnpaused()": TypedContractEvent<
      ContractUnpausedEvent.InputTuple,
      ContractUnpausedEvent.OutputTuple,
      ContractUnpausedEvent.OutputObject
    >;
    ContractUnpaused: TypedContractEvent<
      ContractUnpausedEvent.InputTuple,
      ContractUnpausedEvent.OutputTuple,
      ContractUnpausedEvent.OutputObject
    >;

    "MemberDeactivated(address)": TypedContractEvent<
      MemberDeactivatedEvent.InputTuple,
      MemberDeactivatedEvent.OutputTuple,
      MemberDeactivatedEvent.OutputObject
    >;
    MemberDeactivated: TypedContractEvent<
      MemberDeactivatedEvent.InputTuple,
      MemberDeactivatedEvent.OutputTuple,
      MemberDeactivatedEvent.OutputObject
    >;

    "MemberDeleted(address)": TypedContractEvent<
      MemberDeletedEvent.InputTuple,
      MemberDeletedEvent.OutputTuple,
      MemberDeletedEvent.OutputObject
    >;
    MemberDeleted: TypedContractEvent<
      MemberDeletedEvent.InputTuple,
      MemberDeletedEvent.OutputTuple,
      MemberDeletedEvent.OutputObject
    >;

    "MemberEnrolled(address,string,uint256)": TypedContractEvent<
      MemberEnrolledEvent.InputTuple,
      MemberEnrolledEvent.OutputTuple,
      MemberEnrolledEvent.OutputObject
    >;
    MemberEnrolled: TypedContractEvent<
      MemberEnrolledEvent.InputTuple,
      MemberEnrolledEvent.OutputTuple,
      MemberEnrolledEvent.OutputObject
    >;

    "MemberReactivated(address)": TypedContractEvent<
      MemberReactivatedEvent.InputTuple,
      MemberReactivatedEvent.OutputTuple,
      MemberReactivatedEvent.OutputObject
    >;
    MemberReactivated: TypedContractEvent<
      MemberReactivatedEvent.InputTuple,
      MemberReactivatedEvent.OutputTuple,
      MemberReactivatedEvent.OutputObject
    >;

    "MemberUpdated(address,string)": TypedContractEvent<
      MemberUpdatedEvent.InputTuple,
      MemberUpdatedEvent.OutputTuple,
      MemberUpdatedEvent.OutputObject
    >;
    MemberUpdated: TypedContractEvent<
      MemberUpdatedEvent.InputTuple,
      MemberUpdatedEvent.OutputTuple,
      MemberUpdatedEvent.OutputObject
    >;
  };
}
