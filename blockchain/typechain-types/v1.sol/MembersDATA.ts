/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MembersDATA {
  export type MemberProfileStruct = {
    index: BigNumberish;
    timeEnrolled: BigNumberish;
    walletAddress: AddressLike;
    name: string;
    uid: string;
    officialEmail: string;
    phoneNumber: string;
    whatsappNumber: string;
  };

  export type MemberProfileStructOutput = [
    index: bigint,
    timeEnrolled: bigint,
    walletAddress: string,
    name: string,
    uid: string,
    officialEmail: string,
    phoneNumber: string,
    whatsappNumber: string
  ] & {
    index: bigint;
    timeEnrolled: bigint;
    walletAddress: string;
    name: string;
    uid: string;
    officialEmail: string;
    phoneNumber: string;
    whatsappNumber: string;
  };
}

export interface MembersDATAInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Enrolled"
      | "allMembers"
      | "counter"
      | "delegateEnrollMember"
      | "deleteMember"
      | "enrollMember"
      | "getAllMembers"
      | "makeAdmin"
      | "migrationMethod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Enrolled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateEnrollMember",
    values: [AddressLike, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteMember",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enrollMember",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationMethod",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "Enrolled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateEnrollMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enrollMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrationMethod",
    data: BytesLike
  ): Result;
}

export interface MembersDATA extends BaseContract {
  connect(runner?: ContractRunner | null): MembersDATA;
  waitForDeployment(): Promise<this>;

  interface: MembersDATAInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Enrolled: TypedContractMethod<[check: AddressLike], [boolean], "view">;

  allMembers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, string, string] & {
        index: bigint;
        timeEnrolled: bigint;
        walletAddress: string;
        name: string;
        uid: string;
        officialEmail: string;
        phoneNumber: string;
        whatsappNumber: string;
      }
    ],
    "view"
  >;

  counter: TypedContractMethod<[], [bigint], "view">;

  delegateEnrollMember: TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _uid: string,
      _officialEmail: string,
      _phoneNumber: string,
      _whatsappNumber: string
    ],
    [void],
    "nonpayable"
  >;

  deleteMember: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  enrollMember: TypedContractMethod<
    [
      _name: string,
      _uid: string,
      _officialEmail: string,
      _phoneNumber: string,
      _whatsappNumber: string
    ],
    [void],
    "nonpayable"
  >;

  getAllMembers: TypedContractMethod<
    [],
    [MembersDATA.MemberProfileStructOutput[]],
    "view"
  >;

  makeAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  migrationMethod: TypedContractMethod<
    [
      index: BigNumberish,
      timestamp: BigNumberish,
      walletAddress: AddressLike,
      _name: string,
      _uid: string,
      _officialEmail: string,
      _phoneNumber: string,
      _whatsappNumber: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Enrolled"
  ): TypedContractMethod<[check: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allMembers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, string, string] & {
        index: bigint;
        timeEnrolled: bigint;
        walletAddress: string;
        name: string;
        uid: string;
        officialEmail: string;
        phoneNumber: string;
        whatsappNumber: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegateEnrollMember"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _uid: string,
      _officialEmail: string,
      _phoneNumber: string,
      _whatsappNumber: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteMember"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enrollMember"
  ): TypedContractMethod<
    [
      _name: string,
      _uid: string,
      _officialEmail: string,
      _phoneNumber: string,
      _whatsappNumber: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllMembers"
  ): TypedContractMethod<[], [MembersDATA.MemberProfileStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "makeAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migrationMethod"
  ): TypedContractMethod<
    [
      index: BigNumberish,
      timestamp: BigNumberish,
      walletAddress: AddressLike,
      _name: string,
      _uid: string,
      _officialEmail: string,
      _phoneNumber: string,
      _whatsappNumber: string
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
